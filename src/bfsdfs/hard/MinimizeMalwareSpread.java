/*

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two
 nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can
 be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be
removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1


Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length

 */
package bfsdfs.hard;

/**
 * Created by poorvank.b on 23/10/18.
 */
public class MinimizeMalwareSpread {

    int[] parent = new int[301];
    int[] size = new int[301];
    public int minMalwareSpread(int[][] graph, int[] initial) {
        for(int i=0;i<=300;i++) {
            parent[i]=i;
            size[i]=1;
        }
        int max=0;
        int delete = initial[0];
        for (int i=0;i<graph.length;i++) {
            for(int j=0;j<graph.length;j++) {
                if(i!=j && graph[i][j]!=0 && parent[i]!=parent[j]) {
                    union(i,j);
                }
            }
        }
        for (int i : initial) {
            if(size[parent[i]]>max || (size[parent[i]]==max && i<delete)) {
                max = size[parent[i]];
                delete=i;
            }
        }
        return delete;
    }

    private int parent(int i) {
        while (i!=parent[i]) {
            parent[i]=parent[parent[i]];
            i=parent[i];
        }
        return i;
    }

    private void union(int i,int j) {
        int iParent = parent(i);
        int jParent = parent(j);
        if(size[iParent]>size[jParent]) {
            parent[jParent]=iParent;
            size[iParent]+=size[jParent];
        } else {
            parent[iParent]=jParent;
            size[jParent]+=size[iParent];
        }
    }

    public static void main(String[] args){
        int[][] a = new int[][]{
                {1,0,0,0,1,0,0,0},
                {0,1,1,0,0,1,0,0},
                {0,1,1,0,1,0,0,0},
                {0,0,0,1,1,0,0,0},
                {1,0,1,1,1,0,0,1},
                {0,1,0,0,0,1,0,0},
                {0,0,0,0,0,0,1,1},
                {0,0,0,0,1,0,1,1}};
        System.out.println(new MinimizeMalwareSpread().minMalwareSpread(a,new int[]{2,7}));// 2
    }

}

// O(n^2)